{"version":3,"sources":["assets/android.svg","assets/apple.svg","App.js","index.js","assets/icon.png"],"names":["module","exports","App","props","installApp","bind","selectRow","showQRCode","device","DeviceDetector","parse","navigator","userAgent","state","isLoading","url","list","current","isInstalling","headerTitle","ref","React","createRef","this","fetch","then","res","json","title","ipaList","apkList","appList","os","name","type","sort","a","b","time","setState","length","canvas","QRCode","toCanvas","content","window","location","href","width","logo","src","require","radius","downloadUrl","domain","path","setTimeout","value","obj","version","build","size","desc","iconClassName","indexOf","active","spinner","text","className","alt","toFixed","format","Date","id","onClick","aria-hidden","map","index","svg","key","style","marginRight","Component","ReactDOM","render","document","getElementById"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,mC,wNC2I5BC,E,kDAjIb,WAAYC,GAAQ,IAAD,uBACjB,cAAMA,IACDC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAClB,IAAMG,GAAS,IAAIC,KAAiBC,MAAMC,UAAUC,WALnC,OAMjB,EAAKC,MAAQ,CACXC,WAAW,EACXC,IAAK,mDACLP,OAAQA,EACRQ,KAAM,GACNC,QAAS,KACTC,cAAc,EACdC,YAAa,2QAEf,EAAKC,IAAMC,IAAMC,YAfA,E,qDAkBnB,WAAsB,IAAD,SACkBC,KAAKV,MAAlCE,EADW,EACXA,IAAKP,EADM,EACNA,OAAQW,EADF,EACEA,YACrBK,IAAMT,GACHU,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJ,IAAMC,EAASD,EAAI,MAA0BA,EAAI,MAAlBR,EACzBU,EAAUF,EAAI,SAAe,GAC7BG,EAAUH,EAAI,SAAe,GAC7BI,EAAUJ,EAAI,SAAe,GAC/BX,EAAO,GACY,QAAnBR,EAAOwB,GAAGC,KACZjB,EAAI,YAAOa,GACiB,YAAnBrB,EAAOwB,GAAGC,KACnBjB,EAAI,YAAOc,GACqB,YAAvBtB,EAAOA,OAAO0B,OACvBlB,EAAI,sBAAOa,GAAP,YAAmBC,GAAnB,YAAgCC,KAEtCf,EAAO,YAAIA,GAAMmB,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,KAAOD,EAAEC,KAAO,GAAK,KACvD,EAAKC,SAAS,CAACzB,WAAW,EAAOK,YAAaS,EAAOZ,KAAK,YAAKA,GAAOC,QAASD,EAAKwB,OAASxB,EAAK,GAAK,UAE3GO,KAAKhB,e,wBAGP,WACE,IAAMkC,EAASlB,KAAKH,IAAIH,QACpBwB,GACFC,IAAOC,SAAS,CACdF,OAAQA,EACRG,QAASC,OAAOC,SAASC,KACzBC,MAAO,IACPC,KAAM,CACJC,IAAKC,EAAQ,IACbC,OAAQ,O,wBAMhB,WAAe,IAAD,SACgB7B,KAAKV,MAAzBI,EADI,EACJA,QAAST,EADL,EACKA,OACjB,GAAIS,EACF,GAAuB,QAAnBT,EAAOwB,GAAGC,KAAgB,CAC5B,IAAIoB,EAAcpC,EAAQqC,OAAS,YAAcrC,EAAQsC,KAAO,iBAChEV,OAAOC,SAASC,KAAO,iDAAmDM,EAC1EG,YAAW,WACT,EAAKjB,SAAS,CAACrB,cAAc,MAC5B,UAEH2B,OAAOC,SAASC,KAAO9B,EAAQqC,OAAS,YAAcrC,EAAQsC,KAAOtC,EAAQgB,O,uBAKnF,SAAWwB,GACTlC,KAAKgB,SAAS,CAACtB,QAASwC,M,oBAG1B,WAAU,IAAD,SACiElC,KAAKV,MAArEC,EADD,EACCA,UAAWE,EADZ,EACYA,KAAMC,EADlB,EACkBA,QAASC,EAD3B,EAC2BA,aAAcC,EADzC,EACyCA,YAAaX,EADtD,EACsDA,OACvDkD,EAAMzC,GAAoB,CAAC0C,QAAS,GAAIC,MAAO,EAAGC,KAAM,EAAGvB,KAAM,EAAGwB,KAAM,GAAI7B,KAAM,SACpF8B,GAA8C,IAA9BL,EAAIzB,KAAK+B,QAAQ,QAAiB,gBAAkB,cAC1E,OACE,kBAAC,IAAD,CAAgBC,OAAQnD,EAAWoD,SAAO,EAACC,KAAK,cAC9C,yBAAKC,UAAU,OACb,2BAAIjD,GACJ,yBAAK+B,IAAKC,EAAQ,IAAsBiB,UAAU,WAAWC,IAAK,KAClE,uBAAGD,UAAU,mBAAb,qBACMV,EAAIC,QADV,UAEUD,EAAIE,MAFd,iCAGOF,EAAIG,KAAK,KAAK,MAAMS,QAAQ,GAHnC,8CAIQC,IAAO,sBAAuB,IAAIC,KAAgB,IAAXd,EAAIpB,QAEnD,yBAAK8B,UAAU,mBAAmBV,EAAII,MAEnC7C,EACC,4BAAQwD,GAAG,cAAcL,UAAU,qBAAqBM,QAASnD,KAAKnB,YACpE,uBAAGgE,UAAWL,EAAeY,cAAY,QACvC,0BAAMP,UAAU,2BAAhB,IAA4ClD,EAAe,8BAAY,qBAHlE,iGAQXV,EAAOwB,GAAGC,KAAyB,uBAAGc,KAAK,gDAAgDqB,UAAU,YAAlE,yFAErC,4BAAQhD,IAAKG,KAAKH,MAClB,yBAAKgD,UAAU,YAAf,KACA,uDACA,yBAAKA,UAAU,uBAEXpD,EAAK4D,KAAI,SAACnB,EAAOoB,GACf,IAAMT,EAAYS,EAAQ,IAAM,EAAI,YAAc,YAC5CC,GAAsC,IAAhCrB,EAAMxB,KAAK+B,QAAQ,QAAiBb,EAAQ,KAA0BA,EAAQ,KAC1F,OACE,yBAAK4B,IAAKF,EAAOT,UAAWA,EAAWM,QAAS,WAAK,EAAKpE,UAAUmD,KAC1C,YAAvBjD,EAAOA,OAAO0B,MAAsB,2BAAG,yBAAKgB,IAAK4B,EAAKT,IAAK,MAC5D,uBAAGW,MAAO,CAAEC,YAAa,QAAzB,IAAoCxB,EAAMxB,MAC1C,uBAAG+C,MAAO,CAACC,YAAa,QAASxB,EAAME,QAAvC,WAAwDF,EAAMG,MAA9D,MACA,2BAAIW,IAA+B,YAAvB/D,EAAOA,OAAO0B,KAAqB,sBAAwB,cACnE,IAAIsC,KAAkB,IAAbf,EAAMnB,mB,GArHrBjB,IAAM6D,WCuExBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,mBChFjDtF,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.4a38c0f8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/android.dccc17be.svg\";","module.exports = __webpack_public_path__ + \"static/media/apple.60af4387.svg\";","import React from 'react';\nimport './App.css';\nimport fetch from 'node-fetch';\nimport DeviceDetector from 'device-detector-js';\nimport format from 'date-format';\nimport QRCode from 'qr-code-with-logo';\nimport LoadingOverlay from 'react-loading-overlay';\n// import { Link } from 'react-router-dom';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.installApp = this.installApp.bind(this);\n    this.selectRow = this.selectRow.bind(this);\n    this.showQRCode = this.showQRCode.bind(this);\n    const device = new DeviceDetector().parse(navigator.userAgent);\n    this.state = {\n      isLoading: true,\n      url: \"https://bigtick.space/app/download/config.json\",\n      device: device,\n      list: [],\n      current: null,\n      isInstalling: false,\n      headerTitle: \"很高兴邀请您安装App，测试并反馈问题，便于我们及时解决您遇到的问题，十分谢谢！Thanks♪(･ω･)ﾉ\"\n    };\n    this.ref = React.createRef()\n  }\n\n  componentDidMount () {\n    const { url, device, headerTitle } = this.state;\n    fetch(url)\n      .then(res => res.json())\n      .then(json => {\n        const title = !json[\"title\"] ? headerTitle : json[\"title\"]\n        const ipaList = json[\"ipaList\"] || []\n        const apkList = json[\"apkList\"] || []\n        const appList = json[\"appList\"] || []\n        let list = []\n        if (device.os.name === 'iOS') {\n          list = [...ipaList];\n        } else if (device.os.name === 'Android') {\n          list = [...apkList];\n        } else if (device.device.type === 'desktop') { // pc\n          list = [...ipaList, ...apkList,  ...appList]\n        }\n        list = [...list].sort((a, b) => a.time < b.time ? 1 : -1)\n        this.setState({isLoading: false, headerTitle: title, list: [...list], current: list.length ? list[0] : null})\n      });\n    this.showQRCode();\n  }\n\n  showQRCode() {\n    const canvas = this.ref.current;\n    if (canvas) {\n      QRCode.toCanvas({\n        canvas: canvas,\n        content: window.location.href,\n        width: 260,\n        logo: {\n          src: require(\"./assets/icon.png\"),\n          radius: 8\n        }\n      })\n    }\n  }\n\n  installApp () {\n    const { current, device } = this.state;\n    if (current) {\n      if (device.os.name === 'iOS') {\n        var downloadUrl = current.domain + \"download/\" + current.path + \"manifest.plist\";\n        window.location.href = \"itms-services://?action=download-manifest&url=\" + downloadUrl;\n        setTimeout(() => {\n          this.setState({isInstalling: true})\n        }, 1000);\n      } else {\n        window.location.href = current.domain + \"download/\" + current.path + current.name;\n      }\n    }\n  }\n\n  selectRow (value) {\n    this.setState({current: value})\n  }\n\n  render() {\n    const { isLoading, list, current, isInstalling, headerTitle, device } = this.state;\n    const obj = current ? current : {version: \"\", build: 0, size: 0, time: 0, desc: \"\", name: \"*.ipa\"}\n    const iconClassName = obj.name.indexOf(\".apk\") !== -1 ? \"fa fa-android\" : \"fa fa-apple\";\n    return (\n      <LoadingOverlay active={isLoading} spinner text='Loading...'>\n        <div className=\"App\">\n          <p>{headerTitle}</p>\n          <img src={require(\"./assets/icon.png\")} className=\"App-icon\" alt={\"\"}/>\n          <p className=\"App-detail-text\">\n            版本：{obj.version}\n            (build {obj.build}) &nbsp;&nbsp;\n            大小：{(obj.size/1024/1024).toFixed(2)} MB &nbsp;&nbsp;\n            更新时间：{format('yyyy-MM-dd hh:mm:ss', new Date(obj.time * 1000))}\n          </p>\n          <div className=\"App-update-desc\">{obj.desc}</div>\n          {\n            !current ? <p>Sorry，未找到任何软件包！</p> :\n              <button id=\"install-app\" className=\"App-install-button\" onClick={this.installApp}>\n                <i className={iconClassName} aria-hidden=\"true\">\n                  <span className=\"App-install-button-text\"> {isInstalling ? \"正在安装...\" : \"安装App\"}</span>\n                </i>\n              </button>\n          }\n          {\n            device.os.name === 'iOS' || true ? <a href=\"https://bigtick.space/app/udid.mobileconfig\" className=\"App-help\">若无法安装请点此下载描述文件</a> : null\n          }\n          <canvas ref={this.ref} />\n          <div className=\"App-line\"> </div>\n          <p>历史版本</p>\n          <div className=\"App-history-version\">\n            {\n              list.map((value, index) => {\n                const className = index % 2 === 0 ? \"App-box-0\" : \"App-box-1\";\n                const svg = value.name.indexOf(\".apk\") !== -1 ? require(\"./assets/android.svg\") : require(\"./assets/apple.svg\");\n                return (\n                  <div key={index} className={className} onClick={()=>{this.selectRow(value)}}>\n                    {device.device.type === 'desktop' && <i><img src={svg} alt={\"\"}/></i>}\n                    <i style={{ marginRight: \"10%\" }}> {value.name}</i>\n                    <p style={{marginRight: \"10%\"}}>{value.version} (build {value.build} )</p>\n                    <p>{format((device.device.type === 'desktop' ? 'yyyy-MM-dd hh:mm:ss' : 'MM-dd hh:mm'),\n                        new Date(value.time * 1000))\n                    }</p>\n                  </div>\n                )\n              })\n            }\n          </div>\n        </div>\n      </LoadingOverlay>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Router from './Router';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n/**\n * 方案A：上传阿里云后有下载app的页面，未注册的iOS设备可以在下载页面跳转pgyer.com获取UDID\n * 方案B：如果你有自己的服务器，可以制作UDID描述文件\n * 可以用<Router />，里面有Help已经写好的前端页面获取UDID\n * ReactDOM.render(<Router />, document.getElementById('root'));\n *\n * Over-the-Air Profile Delivery and Configuration\n * https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/iPhoneOTAConfiguration/ConfigurationProfileExamples/ConfigurationProfileExamples.html#//apple_ref/doc/uid/TP40009505-CH4-SW1\n *\n * 获取UDID苹果返回的XML数据格式\n *\n *     <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n *     <plist version=\"1.0\">\n *       <dict>\n *         <key>IMEI</key>\n *         <string>12 123456 123456 7</string>\n *         <key>PRODUCT</key>\n *         <string>iPhone8,1</string>\n *         <key>UDID</key>\n *         <string>b59769e6c28b73b1195009d4b21cXXXXXXXXXXXX</string>\n *         <key>VERSION</key>\n *         <string>15B206</string>\n *       </dict>\n *     </plist>\n *\n *\n * java端核心代码参考\n * @RestController\n * @RequestMapping(\"/app\")\n * @CrossOrigin\n * public class AppController {\n *\n *        @GetMapping(\"\")\n *    public String app() {\n * \t\treturn \"Welcome to Superbuy App.\";\n *    }\n *\n *    @RequestMapping(value = \"/udid\", method = RequestMethod.POST)\n * \tpublic String getUDID(HttpServletRequest request, HttpServletResponse response) {\n *\n * \t\ttry {\n * \t\t\tresponse.setContentType(\"text/html;charset=UTF-8\");\n * \t\t\trequest.setCharacterEncoding(CharEncoding.UTF_8);\n * \t\t\t// 解析plist\n * \t\t\tNSObject object = XMLPropertyListParser.parse(request.getInputStream());\n * \t\t\tHashMap<String, String> hashMap = (HashMap) object.toJavaObject();\n * \t\t\t// 将设备信息拼接成queryString\n * \t\t\tStrBuilder queryString = new StrBuilder();\n * \t\t\thashMap.forEach((key, value) -> {\n * \t\t\t\ttry {\n * \t\t\t\t\tqueryString.append(key + \"=\" + URLEncoder.encode(value, CharEncoding.UTF_8));\n * \t\t\t\t\tqueryString.append(\"&\");\n *                } catch (UnsupportedEncodingException e) {\n * \t\t\t\t\te.printStackTrace();\n *                }\n *            });\n * \t\t\tif (queryString.endsWith(\"&\")) {\n * \t\t\t\tqueryString.deleteCharAt(queryString.lastIndexOf(\"&\"));\n *            }\n * \t\t\tresponse.setStatus(301); // 301之后iOS设备会自动打开safari浏览器\n * \t\t\tresponse.setHeader(\"Location\", \"https://dl.yourdomain.com/app/myappname/index.html?\" + queryString.toString());\n *\n * \t\t\treturn \"success\";\n *        } catch (Exception e) {\n * \t\t\te.printStackTrace();\n *        }\n *\n * \t\treturn \"failure\";\n *    }\n *\n * }\n */\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/icon.75698332.png\";"],"sourceRoot":""}